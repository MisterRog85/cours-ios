{"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/test\/01-02-decouverte-swift"]}],"hierarchy":{"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac","sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation","kind":"task"}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base"}]},{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode"},{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-Swift-et-de-Xcode"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-SwiftUI","projects":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation","kind":"task"}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code#Les-basiques","kind":"task"}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple","sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte","kind":"task"}]}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/SwiftUI-avanc-","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding","kind":"task"}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet","kind":"task"}]}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/Traitement-de-la-donn-e-en-Swift","projects":[{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession","sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main"}]}]}],"paths":[["doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-Swift-et-de-Xcode"]],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents"},"kind":"project","metadata":{"categoryPathComponent":"Tutorial-Table-of-Contents","role":"project","title":"Le langage Swift","category":"Initiation au développement iOS"},"sections":[{"kind":"hero","image":"swift.png","backgroundImage":"swift.png","chapter":"Découverte de Swift et de Xcode","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Comme présenté dans la partie précédente, Swift est un langage orienté objet open-source."},{"type":"text","text":" "},{"type":"text","text":"Apple intervient comme contributeur principal au projet, et construit des librairies"},{"text":" ","type":"text"},{"text":"propriétaire qui elles ne sont pas open-source.","type":"text"}]}],"title":"Le langage Swift"},{"tasks":[{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Ici nous allons découvrir les bases de la syntaxe de Swift.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}],"stepsSection":[{"media":null,"caption":[{"inlineContent":[{"type":"text","text":"Les propriétés peuvent soient être une variable soit une constante. Une variable"},{"type":"text","text":" "},{"type":"text","text":"pourra être modifiée au cours de son existence, la constante ne pourra exister"},{"type":"text","text":" "},{"type":"text","text":"qu’avec la valeur qui lui a été assignée à l’initialisation."}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Les propriétés peuvent être déclarées sous la forme de mini fonctions qui renvoie la valeur souhaitée.","type":"text"}]}]}],"code":"01-02-code-01.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Les propriétés."}]}],"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Les types."}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"text":"Swift utilise tous les types de base classiques : les entiers, les chaines de","type":"text"},{"type":"text","text":" "},{"text":"caractères, les booléens, les dates… Il existe aussi un type Data qui pourra","type":"text"},{"type":"text","text":" "},{"text":"récupérer du JSON.","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"text":"Il n’est pas toujours nécessaire de déclarer le type de donnée, Swift peut le deviner tout seul.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note"}],"media":null,"type":"step","runtimePreview":null,"code":"01-02-code-02.swift"},{"caption":[{"inlineContent":[{"type":"text","text":"En Swift on peut définir des tableaux, des dictionnaires, des sets… Ils ont un"},{"type":"text","text":" "},{"text":"fonctionnement identiques à ceux deux autres langages de programmation.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Fait interessant, les chaines de caractères en Swift sont considérées comme des"},{"type":"text","text":" "},{"type":"text","text":"tableaux de caractères uniques…"}]}],"style":"note"}],"media":null,"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Les structures de données."}]}],"code":"01-02-code-03.swift"},{"media":null,"type":"step","code":"01-02-code-04.swift","caption":[{"type":"paragraph","inlineContent":[{"text":"Une enum est un type de données avec un nombre fini de valeurs possibles, pré-","type":"text"},{"type":"text","text":" "},{"text":"défini à l’avance par l’utilisateur. Certaines valeurs d’enum peuvent comporter d’autres valeurs d’autres types.","type":"text"}]}],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Les enum."}],"type":"paragraph"}]},{"media":null,"code":"01-02-code-05.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Les boucles.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Les boucles si alors sinon on une structure assez classique en Swift, il n’y a"},{"text":" ","type":"text"},{"type":"text","text":"pas besoin de parenthèses pour définir les paramètres de la boucle."},{"type":"text","text":" "},{"type":"text","text":"Il existe aussi des boucles for et le forEach pour les éléments d’un array."}]},{"type":"aside","name":"Les opérateurs de comparaison sont ","style":"note","content":[{"inlineContent":[{"text":"==, !=, <, <=, >, >=","type":"text"}],"type":"paragraph"}]}]},{"code":"01-02-code-06.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Le switch.","type":"text"}]}],"caption":[{"inlineContent":[{"type":"text","text":"Il permet d’itérer sur un ensemble de valeurs possibles, ainsi qu’une valeur par"},{"type":"text","text":" "},{"type":"text","text":"défaut."}],"type":"paragraph"}],"runtimePreview":null,"type":"step"},{"code":"01-02-code-07.swift","runtimePreview":null,"media":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parfois lors de la déclaration d’une variable, on connait son type à l’avance"},{"text":" ","type":"text"},{"text":"mais on est pas sûr d’avoir une valeur. C’est notamment le cas pour les variables","type":"text"},{"type":"text","text":" "},{"text":"qui seront initiées par un appel réseau : une erreur pourrait faire que notre","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable ne soit jamais initialisée comme prévue. Pour parer à ce problème, et"},{"type":"text","text":" "},{"text":"au nul pointer exception, Swift propose d’utiliser des optionnels. Lors de la","type":"text"},{"text":" ","type":"text"},{"text":"déclaration du type, on idique que l’élément est optionnel, et que ce sera à","type":"text"},{"type":"text","text":" "},{"text":"nous plus tard de vérifier que la variable est bien initialisée avant de l’utiliser.","type":"text"}]},{"name":"Note","content":[{"inlineContent":[{"text":"Lorsque l’on veut extraire une donnée issue d’un tableau, le type de retour est toujours optionnel car l’index fourni peut renvoyer vers un élément inexistant dans le tableau.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"}],"content":[{"inlineContent":[{"text":"Les optionnels.","type":"text"}],"type":"paragraph"}],"type":"step"},{"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Les fonctions permettent d’apporter du traitement aux données. Elles peuvent prendre ou non des paramètres et avoir ou non un retour."}],"type":"paragraph"}],"code":"01-02-code-08.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Les fonctions."}]}],"media":null},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift est un langage de programmation orienté objet. Pour créer des objets en"},{"type":"text","text":" "},{"type":"text","text":"Swift on a deux solutions : les classes et les structures. Pour une introduction"},{"text":" ","type":"text"},{"type":"text","text":"au développement iOS, nous nous contentrons de dire que les deux alternatives"},{"text":" ","type":"text"},{"type":"text","text":"sont assez similaires, avec 4 différences notables :"},{"type":"text","text":" "},{"text":"1️⃣ L’héritage n’est pas possible pour les structures alors qu’il l’est pour les classes.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"2️⃣ L’utilisation des classes se fait par passage de référence alors que celui des structs se fait par valeur."},{"type":"text","text":" "},{"type":"text","text":"3️⃣ Les valeurs d’une classe peuvent être modifiées après l’initialisation, pas celles d’une structure."},{"text":" ","type":"text"},{"text":"4️⃣ L’initialisateur est présent “de base” dans les structures.","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"text":"Dans les initialisateurs, on utilise le self comme référence à l’objet en cours. En Swift, le ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":" est comparable au "},{"type":"codeVoice","code":"this"},{"text":" de Java.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note"}],"code":"01-02-code-09.swift","runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Les objets."}]}],"media":null},{"media":null,"content":[{"inlineContent":[{"text":"Les protocoles.","type":"text"}],"type":"paragraph"}],"code":"01-02-code-010.swift","type":"step","runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"On peut résumer les protocoles comme le plan d’une classe ou d’une structure. On définit dedans"},{"text":" ","type":"text"},{"type":"text","text":"les éléments absolument nécessaires pour assurer le fonctionnement attendu."},{"text":" ","type":"text"},{"type":"text","text":"L’utilisation de protocoles permet de rendre le code plus générique et de bien le compartimenter."}],"type":"paragraph"}]},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Le delegate pattern."}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"type":"text","text":"Permet à une classe d’appeler une méthode définit dans une autre classe. Ce pattern est bien utile pour organiser le code d’une façon optimale."}],"type":"paragraph"}],"code":"01-02-code-011.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Le weak."}]}],"caption":[{"inlineContent":[{"text":"Par défaut en Swift, les variables créées sont la propriété de la struct\/classe qui les a instancié. Les variables resteront en mémoire aussi longtemps que leur créateur existe en mémoire. Mais dans le cas d’un délégué, on tombe dans un schéma où la classe parent a une référence forte à la classe enfant et inversement. Les deux éléments sont dépendants l’un de l’autre et se bloquent mutuellement dans le cas d’une supression mémoire. Pour éviter ce cas de figure, on utilise le weak (souvent dans la classe dite “fille”) pour la propriété concernée.","type":"text"}],"type":"paragraph"}],"media":null,"code":"01-02-code-011.swift","runtimePreview":null,"type":"step"},{"code":"01-02-code-012.swift","media":null,"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Il est possible d’étendre une classe avec une extension pour y rajouter des fonctions. C’est utile pour organiser son code dans le projet, décharger une classe qui serait sinon trop longue, ou bien rajouter nos propres fonctions aux classes système pour pouvoir y rajouter nos propres fonctions !"}]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Dans les extensions on utilise aussi le self, qui fait aussi référence à l’objet en cours."}],"type":"paragraph"}]}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Les extensions."}]}],"runtimePreview":null},{"caption":[{"type":"paragraph","inlineContent":[{"text":"Nous avons vu les closures plus haut pour la déclaration d’une variable. Les closures sont des blocs de code indépendants qui peuvent être utilisés dans notre code et peuvent être passés comme paramètres dans certaines fonctions. Les closures sont similaires aux ","type":"text"},{"code":"blocks","type":"codeVoice"},{"text":" en C. Les closures capturent également l’environnement dans lequel elles ont été créées, ce qui signifie qu’elles prennent une copie des valeurs qui sont utilisées à l’intérieur d’elles.","type":"text"}]}],"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Les closures."}],"type":"paragraph"}],"code":"01-02-code-013.swift","runtimePreview":null}],"anchor":"Les-bases-du-langage","title":"Les bases du langage"}],"kind":"tasks"},{"kind":"callToAction","abstract":[{"text":"Introduit en 2019, SwiftUI est la nouvelle approche proposée par Apple pour créer des vues. SwiftUI permet de remplacer les vues créer via des Storyboard ou via du code UIKit. UIKit n’est cependant pas complètement rendu obsolète car SwiftUI est, in fine, une surcouche à UIKit. Ici la création des vues se fait de manière déclarative avec un apperçu en direct dans la preview interactive. SwiftUI fonctionne sur toutes les plateformes de la marque, le rendant très versatile.","type":"text"}],"title":"SwiftUI c'est quoi ?","action":{"type":"reference","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"overridingTitle":"Get started","isActive":true,"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui"},"featuredEyebrow":"Tutorial"}],"references":{"doc://com.williamtomas.test/tutorials/test/02-02-swiftui-code":{"url":"\/tutorials\/test\/02-02-swiftui-code","title":"Prise en main de SwiftUI","role":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code","abstract":[{"type":"text","text":"Dans cette section, nous allons parcourir les éléments graphiques basiques proposés par SwiftUI pour créer une vue."}],"type":"topic","kind":"project"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-trackpad":{"type":"section","title":"Le trackpad","url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad","role":"pseudoSymbol","abstract":[{"type":"text","text":"Pour certains d’entre vous, ce cours sera la première en main d’un Mac. Découvrons quelques spécificités liées à cet environnement."}],"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-du-haut":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut","type":"section","title":"Le volet du haut"},"doc://com.williamtomas.test/tutorials/test/04-02-intro-urlsession":{"url":"\/tutorials\/test\/04-02-intro-urlsession","title":"Récupérer des données depuis un serveur","role":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession","abstract":[{"type":"text","text":"Jusqu’à présent, toute la donnée que nous traitons est soit directement contenue dans l’app soit ajoutée par l’utilisateur. Dans la réalité des faits, la vaste majorité de la donnée consommée par une application provient d’un serveur. Nous allons découvrir comment récuperer cette donnée et l’afficher dans une application basique."}],"type":"topic","kind":"project"},"01-02-code-03.swift":{"syntax":"swift","highlights":[],"identifier":"01-02-code-03.swift","fileType":"swift","fileName":"exemple.swift","type":"file","content":["var personnes: [String] = [\"Alice\", \"Bob\"] \/\/ un tableau","var prenomsEtAge: [String: Int] = [\"Alice\": 22, \"Bob\": 21] \/\/ un dictionnaire","var prenoms = Set([\"Alice\", \"Bob\"])","","\/\/ pour récuperer les données","","print(personnes[0]) \/\/ affiche \"Alice\"","","print(prenomsEtAge[\"Alice\"]) \/\/ affiche 22","","\/\/ pour ajouer des données","","personnes.append(\"Steve\")","","prenomsEtAge[\"Steve\"] = 30"]},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/D-couverte-de-Swift-et-de-Xcode":{"title":"Découverte de Swift et de Xcode","url":"\/tutorials\/tutorial-table-of-contents\/d-couverte-de-swift-et-de-xcode","abstract":[],"kind":"article","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-Swift-et-de-Xcode","type":"topic","role":"article"},"doc://com.williamtomas.test/tutorials/test/04-01-intro-swiftdata":{"kind":"project","role":"project","url":"\/tutorials\/test\/04-01-intro-swiftdata","abstract":[{"type":"text","text":"Introduit en 2023 en remplacement de CoreData, SwiftData vise à rendre plus simple le stockage de données sur le téléphone en s’intégrant bien dans une application basée sur SwiftUI."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata","type":"topic","title":"Introduction à SwiftData"},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui":{"type":"topic","title":"Navigation entre plusieurs écrans","url":"\/tutorials\/test\/03-03-navigation-swiftui","role":"project","abstract":[{"type":"text","text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est que nous allons découvrir dans cette partie."}],"kind":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui"},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet":{"title":"Créer son premier projet","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet","abstract":[{"type":"text","text":"Découvrons comment se passe la création d’un projet sur Xcode."}],"url":"\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/D-couverte-de-SwiftUI":{"kind":"article","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-SwiftUI","title":"Découverte de SwiftUI","role":"article","type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/d-couverte-de-swiftui","abstract":[]},"01-02-code-02.swift":{"fileType":"swift","fileName":"exemple.swift","type":"file","content":["var nom: String = \"Lennon\"","var prenom = \"Bob\"","var age: Int = 27","var taille: Double = 1.84","var isAStudent: Bool = true"],"syntax":"swift","highlights":[],"identifier":"01-02-code-02.swift"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/SwiftUI-avanc-":{"kind":"article","title":"SwiftUI avancé","role":"article","url":"\/tutorials\/tutorial-table-of-contents\/swiftui-avanc-","abstract":[],"type":"topic","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/SwiftUI-avanc-"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple":{"url":"\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple","title":"Pourquoi développer sur les plateformes Apple ?","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"type":"section","kind":"section"},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State":{"url":"\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State","title":"Les états avec le property wrapper @State","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State","abstract":[{"type":"text","text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur."}],"type":"section","kind":"section"},"doc://com.williamtomas.test/tutorials/test/04-02-intro-urlsession#Prise-en-main":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main","abstract":[{"type":"text","text":"Jusqu’à présent, toute la donnée que nous traitons est soit directement contenue dans l’app soit ajoutée par l’utilisateur. Dans la réalité des faits, la vaste majorité de la donnée consommée par une application provient d’un serveur. Nous allons découvrir comment récuperer cette donnée et l’afficher dans une application basique."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main","type":"section","title":"Prise en main"},"01-02-code-01.swift":{"syntax":"swift","highlights":[],"identifier":"01-02-code-01.swift","fileType":"swift","fileName":"exemple.swift","type":"file","content":["let id = 01 \/\/ ici une constante","var prenom = \"bob\" \/\/ ici une variable","","var nomEtPrenom: String = {","    let nom = \"Jobs\"","    let prenom = \"Steve\"","    return nom+prenom","}()"]},"01-02-code-08.swift":{"fileType":"swift","fileName":"exemple.swift","type":"file","content":["func direBonjour() {","    print(\"Hello World !\")","}","","func additionner(x: Int, y: Int) -> Int {","    return x + y","}"],"syntax":"swift","highlights":[],"identifier":"01-02-code-08.swift"},"doc://com.williamtomas.test/tutorials/test/02-02-swiftui-code#Les-basiques":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/02-02-swiftui-code#Les-basiques","abstract":[{"text":"Dans cette section, nous allons parcourir les éléments graphiques basiques proposés par SwiftUI pour créer une vue.","type":"text"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code#Les-basiques","type":"section","title":"Les basiques"},"doc://com.williamtomas.test/tutorials/test/02-01-intro-swiftui#Pr%C3%A9sentation":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation","abstract":[{"text":"Introduit en 2019, SwiftUI est la nouvelle approche proposée par Apple pour créer des vues. SwiftUI permet de remplacer les vues créer via des Storyboard ou via du code UIKit. UIKit n’est cependant pas complètement rendu obsolète car SwiftUI est, in fine, une surcouche à UIKit. Ici la création des vues se fait de manière déclarative avec un apperçu en direct dans la preview interactive. SwiftUI fonctionne sur toutes les plateformes de la marque, le rendant très versatile.","type":"text"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation","type":"section","title":"Présentation"},"01-02-code-06.swift":{"content":["enum feuTricolore {","    case rouge, orange, vert","}","","let monFeu: feuTricolore = .rouge","","switch monFeu {","    case .rouge:","        print(\"rouge\")","    case .orange:","        print(\"orange\")","    case .vert:","        print(\"vert\")","    default:","        print(\"valeur inconnue\")","}","","enum progrèsLivre {","    case pasLu","    case terminé","    case enCours(page: Int)","}","","let monLivre: progrèsLivre = .enCours(page: 80)","","switch monLivre {","case .pasLu:","    print(\"commençons !\")","case .terminé:","    print(\"bien joué\")","case .enCours(let page):","    print(\"on continue page \\(page+1)\")","}"],"type":"file","syntax":"swift","fileName":"exemple.swift","fileType":"swift","identifier":"01-02-code-06.swift","highlights":[]},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-image":{"type":"section","title":"Partie image","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image","role":"pseudoSymbol","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}],"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image"},"01-02-code-013.swift":{"fileName":"exemple.swift","fileType":"swift","syntax":"swift","highlights":[],"identifier":"01-02-code-013.swift","content":["\/\/ format des closures","{ (paramètres) -> type de retour in","   logique","}","","\/\/ exemple de closure","let chiffres = [1, 2, 3, 4, 5]","let chiffresInversés = chiffres.sorted(by: { (c1: Int, c2: Int) -> Bool in","    return s1 > s2","})","print(chiffresInversés) \/\/ affiche [5, 4, 3, 2, 1]"],"type":"file"},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui#Afficher-une-bottom-sheet":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet","abstract":[{"text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est que nous allons découvrir dans cette partie.","type":"text"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet","type":"section","title":"Afficher une bottom sheet"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-gauche":{"title":"Le volet gauche","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche","type":"section","role":"pseudoSymbol"},"01-02-code-09.swift":{"content":["class Personne {","    let nom: String","    let prenom: String","","    init(nom: String, prenom: String) {","        self.nom = nom","        self.prenom = prenom","    }","}","","struct Personne {","    let nom: String","    let prenom: String","}"],"type":"file","syntax":"swift","fileName":"exemple.swift","fileType":"swift","identifier":"01-02-code-09.swift","highlights":[]},"01-02-code-011.swift":{"fileType":"swift","fileName":"exemple.swift","type":"file","content":["protocol MonDelegate {","    func faireCeci()","}","","class MaPremiereClasse {","    weak var delegate: MonDelegate","","    init(delegate: MonDelegate) {","        self.delegate = delegate","    }","","    func faireCela() {","        delegate.faireCeci()","    }","}","","class MaDeuxiemeClasse: MonDelegate {","    let maClasse = MaPremiereClasse(delegate: self)","","    func faireCeci() {","        print(\"J'ai été appelé depuis MaPremiereClasse\")","    }","}"],"syntax":"swift","highlights":[],"identifier":"01-02-code-011.swift"},"01-02-code-07.swift":{"content":["let personne1: String? = \"Alice\"","let personne2: String? = nil","","if let personne1 {","    \/\/ je rentre dans ma boucle","    print(\"boujour \\(personne1)\")","}","","if let personne2 {","    \/\/ je ne rentre pas dans ma boucle","    print(\"boujour \\(personne2)\")","}","","let personnes: [String] = [\"Alice\", \"Bob\"]","","personnes[0] \/\/ return \"Alice\", de type String?","","personnes[4] \/\/ return nil, de type String?"],"type":"file","syntax":"swift","fileName":"exemple.swift","fileType":"swift","identifier":"01-02-code-07.swift","highlights":[]},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS","type":"section","title":"Un bref historique du développement iOS"},"doc://com.williamtomas.test/tutorials/test/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues":{"kind":"section","title":"Découper notre vue en plusieurs minis vues","role":"pseudoSymbol","url":"\/tutorials\/test\/03-01-optimisation-swiftui#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues","abstract":[{"text":"Dans le chapitre précédent, notre code SwiftUI est fonctionnel et il nous permet d’afficher notre vue convenablement. Mais le fichier de code généré est long, dense : on peut vite s’y perdre ! Le compilateur Swift n’aime pas non plus les vues SwiftUI avec trop de lignes de code, qui vont lui demander du temps d’évaluation supplémentaire et peuvent générer un warning.","type":"text"}],"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues"},"swift.png":{"variants":[{"url":"\/images\/com.williamtomas.test\/swift.png","traits":["1x","light"]}],"identifier":"swift.png","alt":"","type":"image"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/Traitement-de-la-donn-e-en-Swift":{"type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/traitement-de-la-donn-e-en-swift","title":"Traitement de la donnée en Swift","kind":"article","role":"article","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/Traitement-de-la-donn-e-en-Swift","abstract":[]},"doc://com.williamtomas.test/tutorials/test/03-01-optimisation-SwiftUI":{"type":"topic","title":"Optimisation du code SwiftUI","url":"\/tutorials\/test\/03-01-optimisation-swiftui","role":"project","abstract":[{"type":"text","text":"Dans le chapitre précédent, notre code SwiftUI est fonctionnel et il nous permet d’afficher notre vue convenablement. Mais le fichier de code généré est long, dense : on peut vite s’y perdre ! Le compilateur Swift n’aime pas non plus les vues SwiftUI avec trop de lignes de code, qui vont lui demander du temps d’évaluation supplémentaire et peuvent générer un warning."}],"kind":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-simulateur":{"title":"Le simulateur","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur","abstract":[{"text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store.","type":"text"}],"url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur","role":"pseudoSymbol","kind":"section"},"01-02-code-010.swift":{"content":["protocol Vehicule {","    var marque: String","    var modele: String","    var puissance: Int","    var poids: Int","","    func rapportPoidsPuissance() -> Double","}","","struct Voiture: Vehicule {","    var marque: String = \"Tesla\"","    var modele: String = \"Model 3\"","    var puissance: Int = 400","    var poids: Int = 2000","","    func rapportPoidsPuissance() -> Double {","        return poids\/puissance","    }","}","","struct Camion: Vehicule {","    var marque: String = \"Citroen\"","    var modele: String = \"C15\"","    var puissance: Int = 40","    var poids: Int = 900","","    func rapportPoidsPuissance() -> Int {","        return poids\/puissance","    }","}"],"type":"file","syntax":"swift","fileName":"exemple.swift","fileType":"swift","identifier":"01-02-code-010.swift","highlights":[]},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-du-haut":{"title":"Partie du haut","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut","abstract":[{"text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram.","type":"text"}],"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut","type":"section","role":"pseudoSymbol"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation":{"type":"section","title":"Le système d'exploitation","url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation","role":"pseudoSymbol","abstract":[{"text":"Pour certains d’entre vous, ce cours sera la première en main d’un Mac. Découvrons quelques spécificités liées à cet environnement.","type":"text"}],"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-clavier":{"url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier","title":"Le clavier","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier","abstract":[{"type":"text","text":"Pour certains d’entre vous, ce cours sera la première en main d’un Mac. Découvrons quelques spécificités liées à cet environnement."}],"type":"section","kind":"section"},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats":{"title":"Gérer des états dans une vue","url":"\/tutorials\/test\/03-02-swiftui-etats","abstract":[{"type":"text","text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur."}],"kind":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats","type":"topic","role":"project"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents":{"url":"\/tutorials\/tutorial-table-of-contents","title":"Sup de Vinci - 2025","role":"overview","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents","abstract":[{"text":"Avec ce cours, vous allez découvrir les bases du développement d’application sur iOS","type":"text"},{"type":"text","text":" "},{"type":"text","text":"avec des exemples et de la prise en main."},{"type":"text","text":" "},{"text":"L’objectif à la fin de cette semaine est que vous soyez en mesure de développer seul","type":"text"},{"type":"text","text":" "},{"text":"une application iOS simple mais complète.","type":"text"}],"type":"topic","kind":"overview"},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats#Le-property-wrapper-Binding":{"url":"\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding","title":"Le property wrapper @Binding","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding","abstract":[{"type":"text","text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur."}],"type":"section","kind":"section"},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui#La-NavigationStack":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack","abstract":[{"type":"text","text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est que nous allons découvrir dans cette partie."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack","type":"section","title":"La NavigationStack"},"01-02-code-012.swift":{"fileName":"exemple.swift","fileType":"swift","syntax":"swift","highlights":[],"identifier":"01-02-code-012.swift","content":["extension String {","    func ajouterPonctuation() -> String {","        return self + \".\" \/\/ ici self fait référence à la String que l'on souhaite modifier","    }","}","","print(\"Alice\") \/\/ affiche \"Alice\"","","print(\"Alice\".ajouterPonctuation()) \/\/ affiche \"Alice.\""],"type":"file"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple":{"title":"Exemple d'utilisation : reproduction d'un post Instagram","type":"topic","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple","abstract":[{"text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram.","type":"text"}],"url":"\/tutorials\/test\/02-03-swiftui-insta-exemple","role":"project","kind":"project"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-du-bas":{"url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas","title":"Le volet du bas","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"type":"section","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet#Organisons-des-fichiers-de-base":{"type":"section","title":"Organisons des fichiers de base","url":"\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base","role":"pseudoSymbol","abstract":[{"text":"Découvrons comment se passe la création d’un projet sur Xcode.","type":"text"}],"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base"},"01-02-code-05.swift":{"fileName":"exemple.swift","fileType":"swift","syntax":"swift","highlights":[],"identifier":"01-02-code-05.swift","content":["if feu == .vert {","    print(\"je passe\")","} else {","    print(\"je m'arrête\")","}","","let compteur = 1...5","","for nombre in compteur {","    print(\"Le nombre est : \\(nombre)\")","}","","let compteurArray = [1, 2, 3, 4, 5]","","compteurArray.forEach { nombre in","    print(\"Le nombre est : \\(nombre)\")","}"],"type":"file"},"doc://com.williamtomas.test/tutorials/test/01-02-decouverte-swift":{"kind":"project","role":"project","url":"\/tutorials\/test\/01-02-decouverte-swift","abstract":[{"type":"text","text":"Comme présenté dans la partie précédente, Swift est un langage orienté objet open-source."},{"text":" ","type":"text"},{"type":"text","text":"Apple intervient comme contributeur principal au projet, et construit des librairies"},{"text":" ","type":"text"},{"text":"propriétaire qui elles ne sont pas open-source.","type":"text"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift","type":"topic","title":"Le langage Swift"},"doc://com.williamtomas.test/tutorials/test/01-02-decouverte-swift#Les-bases-du-langage":{"kind":"section","title":"Les bases du langage","role":"pseudoSymbol","url":"\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage","abstract":[{"type":"text","text":"Comme présenté dans la partie précédente, Swift est un langage orienté objet open-source."},{"text":" ","type":"text"},{"type":"text","text":"Apple intervient comme contributeur principal au projet, et construit des librairies"},{"type":"text","text":" "},{"text":"propriétaire qui elles ne sont pas open-source.","type":"text"}],"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-de-droite":{"url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite","title":"Le volet de droite","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite","abstract":[{"text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store.","type":"text"}],"type":"section","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac":{"title":"Débuter avec Mac","url":"\/tutorials\/test\/01-05-debuter-avec-mac","abstract":[{"text":"Pour certains d’entre vous, ce cours sera la première en main d’un Mac. Découvrons quelques spécificités liées à cet environnement.","type":"text"}],"kind":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac","type":"topic","role":"project"},"doc://com.williamtomas.test/tutorials/test/04-01-intro-swiftdata#Prise-en-main":{"kind":"section","url":"\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","type":"section","abstract":[{"text":"Introduit en 2023 en remplacement de CoreData, SwiftData vise à rendre plus simple le stockage de données sur le téléphone en s’intégrant bien dans une application basée sur SwiftUI.","type":"text"}],"title":"Prise en main","role":"pseudoSymbol"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Mise-en-place":{"title":"Mise en place","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place","abstract":[{"text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram.","type":"text"}],"url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store":{"kind":"section","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store","url":"\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store","role":"pseudoSymbol","title":"Avoir son application sur l'App Store","type":"section"},"doc://com.williamtomas.test/tutorials/test/02-01-intro-swiftui":{"kind":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui","role":"project","url":"\/tutorials\/test\/02-01-intro-swiftui","type":"topic","title":"SwiftUI c'est quoi ?","abstract":[{"type":"text","text":"Introduit en 2019, SwiftUI est la nouvelle approche proposée par Apple pour créer des vues. SwiftUI permet de remplacer les vues créer via des Storyboard ou via du code UIKit. UIKit n’est cependant pas complètement rendu obsolète car SwiftUI est, in fine, une surcouche à UIKit. Ici la création des vues se fait de manière déclarative avec un apperçu en direct dans la preview interactive. SwiftUI fonctionne sur toutes les plateformes de la marque, le rendant très versatile."}]},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-actions":{"kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions","type":"section","title":"Partie actions"},"01-02-code-04.swift":{"fileType":"swift","fileName":"exemple.swift","type":"file","content":["enum feuTricolore {","    case rouge","    case orange","    case vert","}","","\/\/ peut aussi être délcaré de la sorte","","enum feuTricolore {","    case rouge, orange, vert","}","","let monFeu = feuTricolore.rouge","","\/\/ Si on défini le type attendu pour la constante, alors pas besoin de mettre en complet feuTricolore.rouge","","let monSecondFeu: feuTricolore = .vert","","enum progrèsLivre {","    case pasLu","    case terminé","    case enCours(page: Int)","}"],"syntax":"swift","highlights":[],"identifier":"01-02-code-04.swift"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-texte":{"title":"Partie texte","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}],"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte","type":"section","role":"pseudoSymbol"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement":{"kind":"project","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement","url":"\/tutorials\/test\/01-01-decouverte-environnement","role":"project","title":"Découverte de l'environnement","type":"topic"},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet":{"kind":"project","title":"Créer son premier projet","role":"project","url":"\/tutorials\/test\/01-04-creer-un-projet","abstract":[{"text":"Découvrons comment se passe la création d’un projet sur Xcode.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode":{"type":"topic","url":"\/tutorials\/test\/01-03-decouverte-xcode","title":"Présentation d'Xcode","kind":"project","role":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}]}}}