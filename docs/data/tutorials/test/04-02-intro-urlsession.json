{"kind":"project","metadata":{"role":"project","category":"Initiation au développement iOS","categoryPathComponent":"Tutorial-Table-of-Contents","title":"Récupérer des données depuis un serveur"},"identifier":{"url":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/tutorials\/test\/04-02-intro-urlsession"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"title":"Récupérer des données depuis un serveur","chapter":"Traitement de la donnée en Swift","backgroundImage":"exemple-code-swiftui.jpg","image":"exemple-code-swiftui.jpg","kind":"hero","content":[{"inlineContent":[{"type":"text","text":"Jusqu’à présent, toute la donnée que nous traitons est soit directement contenue dans l’app soit ajoutée par l’utilisateur. Dans la réalité des faits, la vaste majorité de la donnée consommée par une application provient d’un serveur. Nous allons découvrir comment récuperer cette donnée et l’afficher dans une application basique."}],"type":"paragraph"}]},{"tasks":[{"stepsSection":[{"media":null,"content":[{"inlineContent":[{"text":"Tout d’abord, qu’allons nous construire ? Il va s’agir d’une application extrêmement basique qui va afficher des données d’un utilisateur ainsi que sa photo. J’utilise pour cela un serveur web que j’héberge sur ma machine, le format de donnée renvoyé sera le JSON.","type":"text"}],"type":"paragraph"}],"type":"step","code":"04-02-code-01.json","runtimePreview":"04-02-code-01.png","caption":[]},{"type":"step","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Il nous faut pour commencer un modèle, qui reprendra la structure de notre JSON. Il sera sous la forme d’une struct, qui répondra au protocol ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":". Le protocol "},{"type":"codeVoice","code":"Codable"},{"text":" permet à Swift de faire automatiquement le lien entre la donnée reçue du serveur et notre modèle. Pour simplifier la tâche, le nom des éléments de notre modèle est identique à ceux du JSON. Il nous faudrait sinon indiquer des ","type":"text"},{"type":"codeVoice","code":"CodingKeys"},{"type":"text","text":", pour que "},{"code":"Codable","type":"codeVoice"},{"text":" puisse faire le pont entre le modèle et la donnée.","type":"text"}]}],"caption":[],"code":"04-02-code-02.swift","media":null},{"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Nous allons créer la vue basique qui nous permettra d’afficher la donnée récupérée. Le but de ce chapitre étant de prendre en main la récupération de données, la vue est volontairement simple. Nous mettons des fausses données pour avoir un apperçu visuel, en attendant d’avoir le vrai contenu."}],"type":"paragraph"}],"runtimePreview":"04-02-code-03.png","media":null,"code":"04-02-code-03.swift"},{"code":"04-02-code-04.swift","runtimePreview":null,"caption":[],"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Nous allons créer la méthode de récupération de la donnée directement dans la struct de notre vue. Cette fonction aura une forme un peu particulière par rapport aux autre, elle est asynchrone. En Swift, une fonction asynchrone se note "},{"code":"async","type":"codeVoice"},{"text":" et est executée parallèlement au reste de l’application synchrone. L’execution asynchrone d’une fonction est particulièrement utile dans le cas d’une récupération de contenu sur internet car on ne peut pas anticiper la latence du réseau ou le temps de téléchargement. La fonction est aussi marquée ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" car elle va renvoyer une erreur en cas d’erreur réseau (404, 500…).","type":"text"}]}]},{"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Nous ajoutons l’url au format String, puis nous passons cette String en URL via une méthode système. L’url renvoyée par cette méthode est optionnelle, d’où l’utilisation du guard pour s’assurer que la création de l’url s’est bien passée.  En cas de problème de création de l’url le guard va renvoyer une erreur, erreur que nous aurons créer dans notre propre enum. Notre enum d’erreur répond au protocol "},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"code":"04-02-code-05.swift","runtimePreview":null},{"runtimePreview":null,"media":null,"caption":[],"type":"step","code":"04-02-code-06.swift","content":[{"inlineContent":[{"text":"Suite à cela nous utilisons une URLSession pour récupérer la donnée sur le serveur. Cette méthode système est elle aussi asynchrone, d’où l’utilisation du ","type":"text"},{"code":"await","type":"codeVoice"},{"type":"text","text":" avant de l’appeler. Le try permet d’accepter que le retour de la fonction puisse être une erreur (erreur réseau par exemple). Le résultat de cet appel est stocké dans un tuble "},{"type":"codeVoice","code":"(data, response)"},{"type":"text","text":". La data contient la donnée, la response contient la réponse en elle même ou bien l’erreur si l’appel a échoué."}],"type":"paragraph"}]},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Nous devons vérifier que la réponse que l’on a reçu nous permet de continuer l’execution de notre code. Nous utilisons pour cela un guard, qui va vérifier que le type de réponse est le bon, et que le code reçu est bien 200. Si l’une des conditions n’est pas remplie, une erreur est renvoyée et l’execution s’arrête."}]}],"type":"step","media":null,"runtimePreview":null,"code":"04-02-code-07.swift"},{"code":"04-02-code-08.swift","type":"step","content":[{"inlineContent":[{"text":"Si nous sommes arrivés ici, c’est que notre réponse est bonne : nous allons pouvoir traiter notre donnée ! Le code est executé dans un ","type":"text"},{"code":"do catch","type":"codeVoice"},{"type":"text","text":", similaire au "},{"type":"codeVoice","code":"try catch"},{"type":"text","text":" d’autres langages de programmation. Nous utilisons le decoder JSON système, avec la méthode "},{"type":"codeVoice","code":".decode()"},{"text":" qui se base sur le protocol ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" pour faire le lien entre notre modèle et la donnée reçue. Là encore une erreur est renvoyée si quelque chose venait à mal se passer."}],"type":"paragraph"}],"media":null,"runtimePreview":null,"caption":[{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"⚠️ Le décodeur est assez tatillon au niveau des noms qui doivent être les mêmes des deux côtés, ou bien on doit fournir au décodeur une table de référence des noms ","type":"text"},{"type":"codeVoice","code":"CodingKeys"},{"text":".","type":"text"}]}]}]},{"media":null,"code":"04-02-code-09.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Notre méthode pour récuperer la donnée est complète, il faut maintenant l’appeler. Nous utilisons pour cela le modificateur SwiftUI ","type":"text"},{"code":".task{}","type":"codeVoice"},{"type":"text","text":" qui permet d’executer du code asynchrone lors de l’apparition de notre vue. Notre méthode renvoie un objet de type User, que nous allons devoir stocker dans une variable "},{"code":"@State","type":"codeVoice"},{"text":".","type":"text"}]}],"caption":[],"runtimePreview":null},{"runtimePreview":null,"type":"step","media":null,"code":"04-02-code-10.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"L’appel de notre méthode "},{"type":"codeVoice","code":"getUser()"},{"type":"text","text":" se fait à l’aide d’un try, car nous acceptons que le retour de la méthode soit une erreur. C’est ici que nous allons traiter ces erreurs dans différents catch. Pour les besoins du cours, nous nous contenterons d’afficher les erreurs dans la console. Dans une application grand public, une erreur doit être remontée tant au service qu’à l’utilisateur."}],"type":"paragraph"}]},{"runtimePreview":null,"code":"04-02-code-11.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Il faut maintenant adapter notre vue pour prendre en compte la donnée reçue. Pour l’image, nous utilisons un nouvel élément SwiftUI : "},{"code":"AsyncImage","type":"codeVoice"},{"type":"text","text":", qui permet de télécharger une image à partir d’une URL et d’afficher un placeholder si le téléchargement échoue. Notre utilisateur était optionnel, nous devons fournir des données par défaut pour que l’affichage puisse bien se faire par le biais de "},{"code":"??","type":"codeVoice"},{"text":" (que l’on pourrait traduire par : “Si la donnée de gauche est nil, alors utilise celle de droite”).","type":"text"}],"type":"paragraph"}],"caption":[],"media":null},{"caption":[],"runtimePreview":"04-02-code-12.mp4","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notre code est fonctionnel mais peut être encore un peu optimisé. Dans une application, il est important d’informer l’utilisateur de ce qu’il se passe. Ici, notre chargement depuis internet peut être long mais l’utilisateur n’a pas conscience qu’il est quand bien même en cours d’éxecution. Nous pouvons donc ajouter un nouvel élément SwiftUI : "},{"type":"codeVoice","code":"ProgressView()"},{"text":", qui est une roue de chargement. Nous afficherons cette roue tant que notre élément user sera nil. La vérification de la présence de user le rend non optionnel, ce qui simplifie aussi notre code précédent.","type":"text"}]}],"type":"step","code":"04-02-code-12.swift"}],"title":"Prise en main","anchor":"Prise-en-main","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"La consommation de données par une application depuis un serveur se fait par une API, accessible avec une authentification ou non. Pour rendre le cours plus accessible, les API que nous utilisons sont sans authentification. Le format de donnée récupéré est bien souvent au standard JSON (JavaScript Object Notation).","type":"text"}]}],"mediaPosition":"trailing"}]}],"kind":"tasks"}],"hierarchy":{"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement"},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base"}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur"}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage","kind":"task"}]}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-Swift-et-de-Xcode"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-SwiftUI","projects":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui","sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation"}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code#Les-basiques","kind":"task"}]},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple","sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte"}]}]},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI"},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats"},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/SwiftUI-avanc-"},{"projects":[{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main","kind":"task"}]}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/Traitement-de-la-donn-e-en-Swift"}],"paths":[["doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/Traitement-de-la-donn-e-en-Swift"]],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents"},"references":{"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS":{"role":"pseudoSymbol","url":"\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS","kind":"section","abstract":[{"text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple.","type":"text"}],"title":"Un bref historique du développement iOS","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS","type":"section"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-du-bas":{"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas","type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"title":"Le volet du bas"},"doc://com.williamtomas.test/tutorials/test/04-01-intro-swiftdata":{"kind":"project","title":"Introduction à SwiftData","abstract":[{"type":"text","text":"Introduit en 2023 en remplacement de CoreData, SwiftData vise à rendre plus simple le stockage de données sur le téléphone en s’intégrant bien dans une application basée sur SwiftUI."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata","url":"\/tutorials\/test\/04-01-intro-swiftdata","role":"project","type":"topic"},"04-02-code-01.json":{"syntax":"json","fileName":"data.json","fileType":"json","identifier":"04-02-code-01.json","content":["{","  \"nom\": \"Jobs\",","  \"prenom\": \"Steve\",","  \"photo\": \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/f\/f5\/Steve_Jobs_Headshot_2010-CROP2.jpg\/1200px-Steve_Jobs_Headshot_2010-CROP2.jpg\"","}"],"highlights":[],"type":"file"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/D-couverte-de-Swift-et-de-Xcode":{"role":"article","url":"\/tutorials\/tutorial-table-of-contents\/d-couverte-de-swift-et-de-xcode","title":"Découverte de Swift et de Xcode","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-Swift-et-de-Xcode","abstract":[],"type":"topic","kind":"article"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-du-haut":{"role":"pseudoSymbol","type":"section","title":"Le volet du haut","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut","kind":"section","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut"},"doc://com.williamtomas.test/tutorials/test/04-02-intro-urlsession#Prise-en-main":{"role":"pseudoSymbol","type":"section","title":"Prise en main","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main","kind":"section","abstract":[{"type":"text","text":"Jusqu’à présent, toute la donnée que nous traitons est soit directement contenue dans l’app soit ajoutée par l’utilisateur. Dans la réalité des faits, la vaste majorité de la donnée consommée par une application provient d’un serveur. Nous allons découvrir comment récuperer cette donnée et l’afficher dans une application basique."}],"url":"\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main"},"doc://com.williamtomas.test/tutorials/test/04-01-intro-swiftdata#Prise-en-main":{"kind":"section","title":"Prise en main","abstract":[{"type":"text","text":"Introduit en 2023 en remplacement de CoreData, SwiftData vise à rendre plus simple le stockage de données sur le téléphone en s’intégrant bien dans une application basée sur SwiftUI."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","url":"\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","role":"pseudoSymbol","type":"section"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-image":{"kind":"section","title":"Partie image","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image","role":"pseudoSymbol","type":"section"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store":{"role":"pseudoSymbol","type":"section","title":"Avoir son application sur l'App Store","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store","kind":"section","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"url":"\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac":{"kind":"project","title":"Débuter avec Mac","abstract":[{"type":"text","text":"Pour certains d’entre vous, ce cours sera la première prise en main d’un Mac. Découvrons quelques spécificités liées à cet environnement."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac","url":"\/tutorials\/test\/01-05-debuter-avec-mac","role":"project","type":"topic"},"04-02-code-07.swift":{"type":"file","highlights":[{"line":6},{"line":7},{"line":8},{"line":13}],"fileType":"swift","syntax":"swift","identifier":"04-02-code-07.swift","fileName":"exemple.swift","content":["func getUser() async throws -> User {","    let endpoint = \"http:\/\/localhost:3001\/user\"","    guard let url = URL(string: endpoint) else { throw MyError.urlError }","","    let (data, response) = try await URLSession.shared.data(from: url)","    guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {","        throw MyError.invalidResponse","    }","}","","enum MyError: Error {","    case urlError","    case invalidResponse","}"]},"04-02-code-03.swift":{"type":"file","highlights":[],"fileType":"swift","syntax":"swift","identifier":"04-02-code-03.swift","fileName":"exemple.swift","content":["struct TestUrl: View {","    var body: some View {","        VStack(spacing: 20) {","            Circle()","                .foregroundColor(.gray)","                .frame(width: 120, height: 120)","","                HStack(spacing: 8) {","                    Text(\"prenom\")","                    Text(\"nom\")","                }","        }","        .padding()","    }","}"]},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State":{"title":"Les états avec le property wrapper @State","kind":"section","url":"\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State","type":"section","abstract":[{"text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State"},"doc://com.williamtomas.test/tutorials/test/03-01-optimisation-SwiftUI":{"kind":"project","title":"Optimisation du code SwiftUI","abstract":[{"text":"Dans le chapitre précédent, notre code SwiftUI est fonctionnel et il nous permet d’afficher notre vue convenablement. Mais le fichier de code généré est long, dense : on peut vite s’y perdre ! Le compilateur Swift n’aime pas non plus les vues SwiftUI avec trop de lignes de code, qui vont lui demander du temps d’évaluation supplémentaire et peuvent générer un warning.","type":"text"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI","url":"\/tutorials\/test\/03-01-optimisation-swiftui","role":"project","type":"topic"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-actions":{"kind":"section","title":"Partie actions","abstract":[{"text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram.","type":"text"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions","role":"pseudoSymbol","type":"section"},"04-02-code-08.swift":{"syntax":"swift","content":["func getUser() async throws -> User {","    let endpoint = \"http:\/\/localhost:3001\/user\"","    guard let url = URL(string: endpoint) else { throw MyError.urlError }","","    let (data, response) = try await URLSession.shared.data(from: url)","    guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {","        throw MyError.invalidResponse","    }","","    do {","        let decoder = JSONDecoder()","        return try decoder.decode(User.self, from: data)","    } catch {","        throw MyError.invalidParsing","    }","}","","enum MyError: Error {","    case urlError","    case invalidResponse","    case invalidParsing","}"],"type":"file","fileType":"swift","fileName":"exemple.swift","identifier":"04-02-code-08.swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":21}]},"doc://com.williamtomas.test/tutorials/test/04-02-intro-urlsession":{"kind":"project","title":"Récupérer des données depuis un serveur","abstract":[{"type":"text","text":"Jusqu’à présent, toute la donnée que nous traitons est soit directement contenue dans l’app soit ajoutée par l’utilisateur. Dans la réalité des faits, la vaste majorité de la donnée consommée par une application provient d’un serveur. Nous allons découvrir comment récuperer cette donnée et l’afficher dans une application basique."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession","url":"\/tutorials\/test\/04-02-intro-urlsession","role":"project","type":"topic"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement":{"title":"Découverte de l'environnement","kind":"project","url":"\/tutorials\/test\/01-01-decouverte-environnement","type":"topic","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"role":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-texte":{"role":"pseudoSymbol","type":"section","title":"Partie texte","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte","kind":"section","abstract":[{"text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram.","type":"text"}],"url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte"},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet":{"role":"project","type":"topic","title":"Créer son premier projet","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet","kind":"project","abstract":[{"type":"text","text":"Découvrons comment se passe la création d’un projet sur Xcode."}],"url":"\/tutorials\/test\/01-04-creer-un-projet"},"doc://com.williamtomas.test/tutorials/test/01-02-decouverte-swift":{"title":"Le langage Swift","kind":"project","url":"\/tutorials\/test\/01-02-decouverte-swift","type":"topic","abstract":[{"text":"Comme présenté dans la partie précédente, Swift est un langage orienté objet open-source.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Apple intervient comme contributeur principal au projet, et construit des librairies"},{"text":" ","type":"text"},{"type":"text","text":"propriétaire qui elles ne sont pas open-source."}],"role":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift"},"04-02-code-02.swift":{"syntax":"swift","content":["struct User: Codable {","    let nom: String","    let prenom: String","    let photo: String","}"],"type":"file","fileType":"swift","fileName":"exemple.swift","identifier":"04-02-code-02.swift","highlights":[]},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents":{"type":"topic","title":"Sup de Vinci - 2025","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents","abstract":[{"type":"text","text":"Avec ce cours, vous allez découvrir les bases du développement d’application sur iOS"},{"text":" ","type":"text"},{"type":"text","text":"avec des exemples et de la prise en main."},{"text":" ","type":"text"},{"text":"L’objectif à la fin de cette semaine est que vous soyez en mesure de développer seul","type":"text"},{"type":"text","text":" "},{"type":"text","text":"une application iOS simple mais complète."}],"url":"\/tutorials\/tutorial-table-of-contents","kind":"overview","role":"overview"},"04-02-code-03.png":{"type":"image","identifier":"04-02-code-03.png","alt":"","variants":[{"url":"\/images\/com.williamtomas.test\/04-02-code-03.png","traits":["1x","light"]}]},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet#Organisons-des-fichiers-de-base":{"role":"pseudoSymbol","type":"section","title":"Organisons des fichiers de base","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base","kind":"section","abstract":[{"type":"text","text":"Découvrons comment se passe la création d’un projet sur Xcode."}],"url":"\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base"},"04-02-code-12.swift":{"identifier":"04-02-code-12.swift","fileName":"exemple.swift","content":["struct TestUrl: View {","","    @State var user: User?","","    func getUser() async throws -> User {","        let endpoint = \"http:\/\/localhost:3001\/user\"","        guard let url = URL(string: endpoint) else { throw MyError.urlError }","","        let (data, response) = try await URLSession.shared.data(from: url)","","        guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {","            throw MyError.invalidResponse","        }","","        do {","            let decoder = JSONDecoder()","            return try decoder.decode(User.self, from: data)","        } catch {","            throw MyError.invalidParsing","        }","    }","","    var body: some View {","        VStack(spacing: 20) {","            if let user  {","                AsyncImage(url: URL(string: user.photo)) { image in","                    image","                        .resizable()","                        .aspectRatio(contentMode: .fit)","                        .clipShape(Circle())","                } placeholder: {","                    Circle()","                        .foregroundColor(.gray)","                }","                .frame(width: 120, height: 120)","","                HStack(spacing: 8) {","                    Text(user.prenom)","                    Text(user.nom)","                }","            } else {","                ProgressView()","            }","        }","        .padding()","        .task {","            do {","                user = try await getUser()","            } catch MyError.urlError {","                print(\"erreur de création d'url\")","            } catch MyError.invalidResponse {","                print(\"mauvaise reponse du serveur\")","            } catch MyError.invalidParsing {","                print(\"mauvais traitement de la donnée\")","            } catch {","                print(\"erreur inconnue\")","            }","        }","    }","}"],"syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42}]},"04-02-code-01.png":{"type":"image","identifier":"04-02-code-01.png","alt":"","variants":[{"url":"\/images\/com.williamtomas.test\/04-02-code-01.png","traits":["1x","light"]}]},"doc://com.williamtomas.test/tutorials/test/02-01-intro-swiftui#Pr%C3%A9sentation":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation","url":"\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation","abstract":[{"text":"Introduit en 2019, SwiftUI est la nouvelle approche proposée par Apple pour créer des vues. SwiftUI permet de remplacer les vues créer via des Storyboard ou via du code UIKit. UIKit n’est cependant pas complètement rendu obsolète car SwiftUI est, in fine, une surcouche à UIKit. Ici la création des vues se fait de manière déclarative avec un apperçu en direct dans la preview interactive. SwiftUI fonctionne sur toutes les plateformes de la marque, le rendant très versatile.","type":"text"}],"title":"Présentation","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-gauche":{"kind":"section","title":"Le volet gauche","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche"},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui#Afficher-une-bottom-sheet":{"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet","type":"section","url":"\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet","abstract":[{"text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est ce que nous allons découvrir dans cette partie.","type":"text"}],"title":"Afficher une bottom sheet","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats#Le-property-wrapper-Binding":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding","url":"\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding","abstract":[{"text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur.","type":"text"}],"title":"Le property wrapper @Binding","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-trackpad":{"kind":"section","title":"Le trackpad","abstract":[{"type":"text","text":"Pour certains d’entre vous, ce cours sera la première prise en main d’un Mac. Découvrons quelques spécificités liées à cet environnement."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad","url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad","role":"pseudoSymbol","type":"section"},"doc://com.williamtomas.test/tutorials/test/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues","url":"\/tutorials\/test\/03-01-optimisation-swiftui#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues","abstract":[{"text":"Dans le chapitre précédent, notre code SwiftUI est fonctionnel et il nous permet d’afficher notre vue convenablement. Mais le fichier de code généré est long, dense : on peut vite s’y perdre ! Le compilateur Swift n’aime pas non plus les vues SwiftUI avec trop de lignes de code, qui vont lui demander du temps d’évaluation supplémentaire et peuvent générer un warning.","type":"text"}],"title":"Découper notre vue en plusieurs minis vues","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/D-couverte-de-SwiftUI":{"kind":"article","title":"Découverte de SwiftUI","abstract":[],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-SwiftUI","url":"\/tutorials\/tutorial-table-of-contents\/d-couverte-de-swiftui","role":"article","type":"topic"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple":{"abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple","role":"pseudoSymbol","title":"Pourquoi développer sur les plateformes Apple ?","kind":"section","type":"section","url":"\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple":{"role":"project","type":"topic","title":"Exemple d'utilisation : reproduction d'un post Instagram","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple","kind":"project","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}],"url":"\/tutorials\/test\/02-03-swiftui-insta-exemple"},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui":{"type":"topic","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui","url":"\/tutorials\/test\/03-03-navigation-swiftui","abstract":[{"text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est ce que nous allons découvrir dans cette partie.","type":"text"}],"title":"Navigation entre plusieurs écrans","role":"project","kind":"project"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/SwiftUI-avanc-":{"kind":"article","title":"SwiftUI avancé","abstract":[],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/SwiftUI-avanc-","url":"\/tutorials\/tutorial-table-of-contents\/swiftui-avanc-","role":"article","type":"topic"},"doc://com.williamtomas.test/tutorials/test/02-01-intro-swiftui":{"kind":"project","title":"SwiftUI c'est quoi ?","abstract":[{"type":"text","text":"Introduit en 2019, SwiftUI est la nouvelle approche proposée par Apple pour créer des vues. SwiftUI permet de remplacer les vues créer via des Storyboard ou via du code UIKit. UIKit n’est cependant pas complètement rendu obsolète car SwiftUI est, in fine, une surcouche à UIKit. Ici la création des vues se fait de manière déclarative avec un apperçu en direct dans la preview interactive. SwiftUI fonctionne sur toutes les plateformes de la marque, le rendant très versatile."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui","url":"\/tutorials\/test\/02-01-intro-swiftui","role":"project","type":"topic"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-clavier":{"role":"pseudoSymbol","kind":"section","abstract":[{"text":"Pour certains d’entre vous, ce cours sera la première prise en main d’un Mac. Découvrons quelques spécificités liées à cet environnement.","type":"text"}],"title":"Le clavier","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier","url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier"},"04-02-code-12.mp4":{"type":"video","identifier":"04-02-code-12.mp4","alt":null,"variants":[{"url":"\/videos\/com.williamtomas.test\/04-02-code-12.mp4","traits":["1x","light"]}],"poster":null},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-du-haut":{"role":"pseudoSymbol","type":"section","title":"Partie du haut","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut","kind":"section","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}],"url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut"},"04-02-code-11.swift":{"content":["struct TestUrl: View {","","    @State var user: User?","","    func getUser() async throws -> User {","        let endpoint = \"http:\/\/localhost:3001\/user\"","        guard let url = URL(string: endpoint) else { throw MyError.urlError }","","        let (data, response) = try await URLSession.shared.data(from: url)","","        guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {","            throw MyError.invalidResponse","        }","","        do {","            let decoder = JSONDecoder()","            return try decoder.decode(User.self, from: data)","        } catch {","            throw MyError.invalidParsing","        }","    }","","    var body: some View {","        VStack(spacing: 20) {","            AsyncImage(url: URL(string: user?.photo ?? \"\")) { image in","                image","                    .resizable()","                    .aspectRatio(contentMode: .fit)","                    .clipShape(Circle())","            } placeholder: {","                Circle()","                    .foregroundColor(.gray)","            }","            .frame(width: 120, height: 120)","","            HStack(spacing: 8) {","                Text(user?.prenom ?? \"prenom\")","                Text(user?.nom ?? \"nom\")","            }","        }","        .padding()","        .task {","            do {","                user = try await getUser()","            } catch MyError.urlError {","                print(\"erreur de création d'url\")","            } catch MyError.invalidResponse {","                print(\"mauvaise reponse du serveur\")","            } catch MyError.invalidParsing {","                print(\"mauvais traitement de la donnée\")","            } catch {","                print(\"erreur inconnue\")","            }","        }","    }","}","","enum MyError: Error {","    case urlError","    case invalidResponse","    case invalidParsing","}"],"highlights":[{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":36},{"line":37},{"line":38},{"line":39}],"syntax":"swift","fileType":"swift","type":"file","fileName":"exemple.swift","identifier":"04-02-code-11.swift"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/Traitement-de-la-donn-e-en-Swift":{"type":"topic","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/Traitement-de-la-donn-e-en-Swift","url":"\/tutorials\/tutorial-table-of-contents\/traitement-de-la-donn-e-en-swift","abstract":[],"title":"Traitement de la donnée en Swift","role":"article","kind":"article"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-de-droite":{"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite","type":"section","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite","abstract":[{"text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store.","type":"text"}],"title":"Le volet de droite","role":"pseudoSymbol","kind":"section"},"04-02-code-05.swift":{"identifier":"04-02-code-05.swift","fileName":"exemple.swift","content":["func getUser() async throws -> User {","    let endpoint = \"http:\/\/localhost:3001\/user\"","    guard let url = URL(string: endpoint) else { throw MyError.urlError }","}","","enum MyError: Error {","    case urlError","}"],"syntax":"swift","type":"file","fileType":"swift","highlights":[{"line":2},{"line":3},{"line":5},{"line":6},{"line":7},{"line":8}]},"04-02-code-10.swift":{"content":["struct TestUrl: View {","","    @State var user: User?","","    func getUser() async throws -> User {","        let endpoint = \"http:\/\/localhost:3001\/user\"","        guard let url = URL(string: endpoint) else { throw MyError.urlError }","","        let (data, response) = try await URLSession.shared.data(from: url)","","        guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {","            throw MyError.invalidResponse","        }","","        do {","            let decoder = JSONDecoder()","            return try decoder.decode(User.self, from: data)","        } catch {","            throw MyError.invalidParsing","        }","    }","","    var body: some View {","        VStack(spacing: 20) {","            Circle()","                .foregroundColor(.gray)","                .frame(width: 120, height: 120)","","                HStack(spacing: 8) {","                    Text(\"prenom\")","                    Text(\"nom\")","                }","        }","        .padding()","        .task {","            do {","                user = try await getUser()","            } catch MyError.urlError {","                print(\"erreur de création d'url\")","            } catch MyError.invalidResponse {","                print(\"mauvaise reponse du serveur\")","            } catch MyError.invalidParsing {","                print(\"mauvais traitement de la donnée\")","            } catch {","                print(\"erreur inconnue\")","            }","        }","    }","}","","enum MyError: Error {","    case urlError","    case invalidResponse","    case invalidParsing","}"],"highlights":[{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":45}],"syntax":"swift","fileType":"swift","type":"file","fileName":"exemple.swift","identifier":"04-02-code-10.swift"},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats":{"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats","type":"topic","url":"\/tutorials\/test\/03-02-swiftui-etats","abstract":[{"text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur.","type":"text"}],"title":"Gérer des états dans une vue","role":"project","kind":"project"},"04-02-code-09.swift":{"identifier":"04-02-code-09.swift","fileName":"exemple.swift","content":["struct TestUrl: View {","","    @State var user: User?","","    func getUser() async throws -> User {","        let endpoint = \"http:\/\/localhost:3001\/user\"","        guard let url = URL(string: endpoint) else { throw MyError.urlError }","","        let (data, response) = try await URLSession.shared.data(from: url)","","        guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {","            throw MyError.invalidResponse","        }","","        do {","            let decoder = JSONDecoder()","            return try decoder.decode(User.self, from: data)","        } catch {","            throw MyError.invalidParsing","        }","    }","","    var body: some View {","        VStack(spacing: 20) {","            Circle()","                .foregroundColor(.gray)","                .frame(width: 120, height: 120)","","                HStack(spacing: 8) {","                    Text(\"prenom\")","                    Text(\"nom\")","                }","        }","        .padding()","        .task {","            do {","                user = try await getUser()","            } catch {","                ","            }","        }","    }","}","","enum MyError: Error {","    case urlError","    case invalidResponse","    case invalidParsing","}"],"syntax":"swift","type":"file","fileType":"swift","highlights":[]},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation":{"abstract":[{"type":"text","text":"Pour certains d’entre vous, ce cours sera la première prise en main d’un Mac. Découvrons quelques spécificités liées à cet environnement."}],"url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation","title":"Le système d'exploitation","kind":"section","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation","role":"pseudoSymbol"},"exemple-code-swiftui.jpg":{"type":"image","identifier":"exemple-code-swiftui.jpg","alt":"","variants":[{"url":"\/images\/com.williamtomas.test\/exemple-code-swiftui.jpg","traits":["1x","light"]}]},"04-02-code-04.swift":{"identifier":"04-02-code-04.swift","fileName":"exemple.swift","content":["func getUser() async throws -> User {","    ","}"],"syntax":"swift","type":"file","fileType":"swift","highlights":[]},"04-02-code-06.swift":{"content":["func getUser() async throws -> User {","    let endpoint = \"http:\/\/localhost:3001\/user\"","    guard let url = URL(string: endpoint) else { throw MyError.urlError }","","    let (data, response) = try await URLSession.shared.data(from: url)","}","","enum MyError: Error {","    case urlError","}"],"highlights":[{"line":4},{"line":5}],"syntax":"swift","fileType":"swift","type":"file","fileName":"exemple.swift","identifier":"04-02-code-06.swift"},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet":{"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet","role":"pseudoSymbol","url":"\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet","title":"Créer son premier projet","type":"section","abstract":[{"text":"Découvrons comment se passe la création d’un projet sur Xcode.","type":"text"}]},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-simulateur":{"kind":"section","title":"Le simulateur","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur","role":"pseudoSymbol","type":"section"},"doc://com.williamtomas.test/tutorials/test/02-02-swiftui-code":{"type":"topic","kind":"project","abstract":[{"text":"Dans cette section, nous allons parcourir les éléments graphiques basiques proposés par SwiftUI pour créer une vue.","type":"text"}],"url":"\/tutorials\/test\/02-02-swiftui-code","role":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code","title":"Prise en main de SwiftUI"},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui#La-NavigationStack":{"role":"pseudoSymbol","abstract":[{"text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est ce que nous allons découvrir dans cette partie.","type":"text"}],"kind":"section","title":"La NavigationStack","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack","url":"\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack"},"doc://com.williamtomas.test/tutorials/test/02-02-swiftui-code#Les-basiques":{"type":"section","title":"Les basiques","abstract":[{"type":"text","text":"Dans cette section, nous allons parcourir les éléments graphiques basiques proposés par SwiftUI pour créer une vue."}],"role":"pseudoSymbol","url":"\/tutorials\/test\/02-02-swiftui-code#Les-basiques","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code#Les-basiques","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-02-decouverte-swift#Les-bases-du-langage":{"abstract":[{"type":"text","text":"Comme présenté dans la partie précédente, Swift est un langage orienté objet open-source."},{"text":" ","type":"text"},{"type":"text","text":"Apple intervient comme contributeur principal au projet, et construit des librairies"},{"type":"text","text":" "},{"type":"text","text":"propriétaire qui elles ne sont pas open-source."}],"role":"pseudoSymbol","url":"\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage","title":"Les bases du langage","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode":{"role":"project","type":"topic","title":"Présentation d'Xcode","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode","kind":"project","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"url":"\/tutorials\/test\/01-03-decouverte-xcode"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Mise-en-place":{"role":"pseudoSymbol","type":"section","title":"Mise en place","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place","kind":"section","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}],"url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place"}}}