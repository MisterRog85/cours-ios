{"sections":[{"backgroundImage":"exemple-code-swiftui.jpg","title":"Introduction à SwiftData","image":"exemple-code-swiftui.jpg","chapter":"Traitement de la donnée en Swift","content":[{"inlineContent":[{"type":"text","text":"Introduit en 2023 en remplacement de CoreData, SwiftData vise à rendre plus simple le stockage de données sur le téléphone en s’intégrant bien dans une application basée sur SwiftUI."}],"type":"paragraph"}],"kind":"hero"},{"tasks":[{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pour cette partie prise en main, nous nous baserons sur la mini application de contacts du chapitre précédent. Le but est de pouvoir garder en mémoire les éléments ajoutés par l’utilisateur."}]}]}],"stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"En l’état actuel des choses, notre utilisateur peut ajouter autant de contacts qu’il le souhaite. Mais au re-lancement de l’application, tous les éléments qu’il a précédemment ajouté sont supprimés. Pour commencer, nous allons extraire le modèle "},{"code":"Contact","type":"codeVoice"},{"type":"text","text":" afin de le mettre dans son propre fichier."}],"type":"paragraph"}],"code":"04-01-code-01.swift","media":null,"caption":[],"runtimePreview":null,"type":"step"},{"type":"step","media":null,"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Il faut apporter quelques modifications à notre modèle pour le rendre compatible avec SwiftData. Tout d’abord, nous devons passer à une classe au lieu d’une structure. Plusieurs raisons à celà, la première étant qu’avec une classe, si on modifie l’objet à un endroit A le changement sera perçu aussi en un endroit B. De plus, l’utilisation d’une classe permet à un modèle de créer une relation à une autre instance de lui-même. L’utilisation d’une classe nécessite l’ajout d’un initialiseur, et nous passons les éléments de ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":" à "},{"type":"codeVoice","code":"var"},{"type":"text","text":" afin de pouvoir les modifier par la suite."}]}],"code":"04-01-code-02.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Dernière étape pour rendre notre modèle compatible avec SwiftData, il faut importer la librairie SwiftData et ajouter la macro "},{"type":"codeVoice","code":"@Model"},{"type":"text","text":" sur notre modèle."}]}],"type":"step","code":"04-01-code-03.swift","media":null,"runtimePreview":null},{"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Avant de pouvoir utiliser SwiftData dans notre application, il y a deux notions importantes à comprendre : le context et le container. Notre donnée persistée sera stockée dans le container. Mais dans notre application, nous allons interagir avec le context. Lors de nos opérations CRUD, la donnée sera placée temporairement dans le context puis sera transmise au container que l’opération "},{"code":"save","type":"codeVoice"},{"type":"text","text":" sera executée. Dans SwiftData, cette opération "},{"code":"save","type":"codeVoice"},{"type":"text","text":" est automatique et est appelée à chaque mise à jour de vue SwiftUI."}],"type":"paragraph"}],"caption":[],"media":"04-01-code-04.png","type":"step","code":null},{"type":"step","content":[{"inlineContent":[{"text":"Il faut donc informer notre application de quel container utiliser. SwiftData rend la chose simple pour nous, il suffit d’ajouter une ligne de code au fichier source de l’app.","type":"text"}],"type":"paragraph"}],"caption":[{"type":"aside","content":[{"inlineContent":[{"text":"Bien penser à importer SwiftData là aussi !","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note"}],"code":"04-01-code-05.swift","runtimePreview":null,"media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Dans certaines applications, vous allez avoir besoin de stocker plusieurs models différents avec SwiftData, il faut tous les ajouter au container."}]}],"caption":[],"runtimePreview":null,"type":"step","media":null,"code":"04-01-code-05-Bis.swift"},{"caption":[],"type":"step","media":null,"code":"04-01-code-06.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Notre modèle correspond aux attentes de SwiftData, notre app sait qu’elle doit utiliser SwiftData, mais ce n’est pas encore suffisant pour persister notre donnée. Il faut permettre à notre vue d’interagir avec le context, en ajoutant une variable d’environnement "},{"type":"codeVoice","code":"context"},{"text":". De même, nous n’ajoutons plus directement la donnée créée dans notre array, mais bien dans notre context. En SwiftUI, les variables d’environnement sont des variables pré établies qui permettent de paramétrer certains aspects du code.","type":"text"}]}]},{"code":"04-01-code-07.swift","media":null,"content":[{"inlineContent":[{"text":"Si l’on test maintenant notre code, l’ajout se fait correctement mais le contact n’apparait pas sur la liste. Ceci est normal, car notre liste n’est pas encore mise à jour avec notre container. Pour se faire, nous allons utiliser le property wrapper ","type":"text"},{"type":"codeVoice","code":"@Query"},{"text":" sur notre array à la place de ","type":"text"},{"type":"codeVoice","code":"@State"},{"text":". ","type":"text"},{"type":"codeVoice","code":"@Query"},{"type":"text","text":" peut être utilisé de façon brut pour récupérer la donnée, ou bien avec un paramètre pour récupérer et trier \/ filtrer directement la donnée."}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"En utilisant la donnée stockée dans le container, nous n’avons plus besoin de notre fausse donnée utilisée jusqu’à présent, nous initialisons un tableau vide."}],"type":"paragraph"}],"style":"note","name":"Note"}],"type":"step"},{"content":[{"inlineContent":[{"text":"Pour supprimer un élément de façon permanente, nous utilisons la méthode ","type":"text"},{"type":"codeVoice","code":"context.delete()"},{"text":". Pour l’intégrer à notre app, nous allons utiliser une fonctionnalité intégrée aux listes : le swipe to delete. C’est une fonctionnalité très connue d’iOS, que nous rajoutons simplement dans notre code avec le modificateur ","type":"text"},{"code":"onDelete","type":"codeVoice"},{"type":"text","text":". Ce modificateur nous renvoie un set d’index, et c’est grâce à cet index que nous allons retrouver l’élément à supprimer dans notre tableau pour finalement le supprimer de notre container."}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":"04-01-code-08.mp4","code":"04-01-code-08.swift","type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"La modification d’un contact déjà créé va nous demander un peu plus de travail d’adaptation de l’app. Déjà, nous voulons créer une nouvelle page de modification accessible depuis la vue détails d’un contact. Cette vue reprendra la design de la vue d’ajout mais sans les propriétés nom, phone et mail. A la place, nous passerons directement un objet de type contact depuis la vue principale, avec l’attribut "},{"code":"@Bindable","type":"codeVoice"},{"text":". Avec la propriété ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":", nous n’avons plus besoin de fonction pour enregistrer l’élément, c’est fait automatiquement à chaque modification dans un "},{"code":"TextField","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"⚠️ Ne pas confondre @Binding et @Bindable, leur fonctionnement étant similaire mais @Bindable est nécessaire pour les objets SwiftData."}]}],"type":"aside","name":"Note","style":"note"}],"type":"step","media":null,"code":"04-01-code-09.swift"},{"type":"step","media":null,"runtimePreview":null,"caption":[],"code":"04-01-code-11.swift","content":[{"inlineContent":[{"text":"Notre vue principale va elle aussi connaitre des changements. En effet, c’est elle qui héberge le code de notre vue détail. Nous allons rajouter un bouton à cette vue détail pour modifier notre contact en affichant l’écran de modification.","type":"text"}],"type":"paragraph"}]},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Ce bouton va avoir besoin d’une action. Comme nous sommes dans un context de navigation, nous avons accès au contact en cours. Nous allons ajouter une variable optionnelle "},{"type":"codeVoice","code":"@State"},{"text":" dans la vue principale, et lui assigner la valeur du contact en cours lors de l’appuie sur le bouton.","type":"text"}],"type":"paragraph"}],"media":null,"code":"04-01-code-12.swift","type":"step","runtimePreview":null},{"runtimePreview":"04-01-code-13.mp4","media":null,"caption":[],"type":"step","code":"04-01-code-13.swift","content":[{"inlineContent":[{"text":"L’action défini dans notre bouton peut paraître étrange mais elle va prendre sens maintenant. En effet, il existe un deuxième modificateur ","type":"text"},{"type":"codeVoice","code":".sheet"},{"type":"text","text":" qui au lieu de prendre un booléen comme paramètre prend une variable "},{"type":"codeVoice","code":"@State"},{"text":". L’idée est qu’à chaque modification de cette variable, la page souhaitée est affichée. Et là aussi, nous avons accès à notre objet contact en cours donc nous pouvons le passer comme paramètre à notre vue de modification !","type":"text"}],"type":"paragraph"}]}],"anchor":"Prise-en-main","title":"Prise en main"}],"kind":"tasks"},{"kind":"callToAction","featuredEyebrow":"Tutorial","title":"Récupérer des données depuis un serveur","abstract":[{"text":"Jusqu’à présent, toute la donnée que nous traitons est soit directement contenue dans l’app soit ajoutée par l’utilisateur. Dans la réalité des faits, la vaste majorité de la donnée consommée par une application provient d’un serveur. Nous allons découvrir comment récuperer cette donnée et l’afficher dans une application basique.","type":"text"}],"action":{"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession","isActive":true,"overridingTitle":"Get started"}}],"metadata":{"category":"Initiation au développement iOS","title":"Introduction à SwiftData","role":"project","categoryPathComponent":"Tutorial-Table-of-Contents"},"hierarchy":{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents","modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement"},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac"},{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet"},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode"},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-Swift-et-de-Xcode"},{"projects":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui","sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation"}]},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code#Les-basiques","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple","sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut","kind":"task"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte"}]}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-SwiftUI"},{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/SwiftUI-avanc-","projects":[{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI"},{"sections":[{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats"},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack","kind":"task"},{"kind":"task","reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui"}]},{"projects":[{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata"},{"sections":[{"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main","kind":"task"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession"}],"reference":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/Traitement-de-la-donn-e-en-Swift"}],"paths":[["doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents","doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/$volume","doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/Traitement-de-la-donn-e-en-Swift"]]},"identifier":{"url":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"project","variants":[{"paths":["\/tutorials\/test\/04-01-intro-swiftdata"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS","url":"\/tutorials\/test\/01-01-decouverte-environnement#Un-bref-historique-du-d%C3%A9veloppement-iOS","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"kind":"section","title":"Un bref historique du développement iOS","role":"pseudoSymbol"},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats#Le-property-wrapper-Binding":{"type":"section","title":"Le property wrapper @Binding","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Le-property-wrapper-Binding","abstract":[{"type":"text","text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur."}]},"04-01-code-05-Bis.swift":{"fileName":"exemple.swift","content":["import SwiftUI","import SwiftData","","@main","struct testApp: App {","    var body: some Scene {","        WindowGroup {","            ContentView()","        }","        .modelContainer(for: [Contact.self, Model2.self, Model3.self, Modal3.self])","    }","}"],"highlights":[],"type":"file","identifier":"04-01-code-05-Bis.swift","syntax":"swift","fileType":"swift"},"04-01-code-06.swift":{"content":["import SwiftUI","import SwiftData","","struct ContentView: View {","    @State var contacts: [Contact] = [","        .init(name: \"Alice\", phoneNumber: \"0601020304\", mail: \"alice@gmail.com\"),","        .init(name: \"Bob\", phoneNumber: \"0605060708\", mail: \"bob@gmail.com\")","    ]","","    @State var showAddView: Bool = false","","    @Environment(\\.modelContext) var context","","    var body: some View {","        NavigationStack {","            List {","                ForEach(contacts) { contact in","                    NavigationLink(value: contact) {","                        Text(contact.name)","                    }","                }","            }","            .navigationTitle(\"Contacts\")","            .toolbar {","                ToolbarItem(placement: .navigationBarTrailing) {","                    Button {","                        showAddView.toggle()","                    } label: {","                        Image(systemName: \"plus.circle\")","                    }","                }","            }","            .sheet(isPresented: $showAddView) {","                AddView(addMethod: {nom, phone, mail in","                    let contact = Contact(name: nom, phoneNumber: phone, mail: mail)","                    context.insert(contact)","                })","            }","            .navigationDestination(for: Contact.self) { contact in","                VStack {","                    Text(contact.name)","                    Text(contact.mail)","                }","            }","        }","    }","}"],"highlights":[],"syntax":"swift","identifier":"04-01-code-06.swift","type":"file","fileName":"exemple.swift","fileType":"swift"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple","url":"\/tutorials\/test\/01-01-decouverte-environnement#Pourquoi-d%C3%A9velopper-sur-les-plateformes-Apple","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"kind":"section","title":"Pourquoi développer sur les plateformes Apple ?","role":"pseudoSymbol"},"04-01-code-05.swift":{"fileName":"exemple.swift","content":["import SwiftUI","import SwiftData","","@main","struct testApp: App {","    var body: some Scene {","        WindowGroup {","            ContentView()","        }","        .modelContainer(for: Contact.self)","    }","}"],"highlights":[],"type":"file","identifier":"04-01-code-05.swift","syntax":"swift","fileType":"swift"},"exemple-code-swiftui.jpg":{"identifier":"exemple-code-swiftui.jpg","type":"image","variants":[{"url":"\/images\/com.williamtomas.test\/exemple-code-swiftui.jpg","traits":["1x","light"]}],"alt":""},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats":{"title":"Gérer des états dans une vue","role":"project","type":"topic","url":"\/tutorials\/test\/03-02-swiftui-etats","abstract":[{"text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur.","type":"text"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats","kind":"project"},"doc://com.williamtomas.test/tutorials/test/04-01-intro-swiftdata#Prise-en-main":{"url":"\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","kind":"section","title":"Prise en main","abstract":[{"type":"text","text":"Introduit en 2023 en remplacement de CoreData, SwiftData vise à rendre plus simple le stockage de données sur le téléphone en s’intégrant bien dans une application basée sur SwiftUI."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata#Prise-en-main","role":"pseudoSymbol","type":"section"},"04-01-code-12.swift":{"highlights":[{"line":8},{"line":9},{"line":49}],"identifier":"04-01-code-12.swift","content":["struct ContentView: View {","    @Query var contacts: [Contact] = []","","    @State var showAddView: Bool = false","","    @Environment(\\.modelContext) var context","","    @State var contactToEdit: Contact?","","    var body: some View {","        NavigationStack {","            List {","                ForEach(contacts) { contact in","                    NavigationLink(value: contact) {","                        Text(contact.name)","                    }","                }","                .onDelete { indexSet in","                    for index in indexSet {","                        context.delete(contacts[index])","                    }","                }","            }","            .navigationTitle(\"Contacts\")","            .toolbar {","                ToolbarItem(placement: .navigationBarTrailing) {","                    Button {","                        showAddView.toggle()","                    } label: {","                        Image(systemName: \"plus.circle\")","                    }","                }","            }","            .sheet(isPresented: $showAddView) {","                AddView(","                    addMethod: {nom, phone, mail in","                        let contact = Contact(name: nom, phoneNumber: phone, mail: mail)","                        context.insert(contact)","                    })","            }","            .navigationDestination(for: Contact.self) { contact in","                VStack {","                    Text(contact.name)","                    Text(contact.mail)","","                    Spacer()","","                    Button(action: {","                        contactToEdit = contact","                    }, label: {Text(\"Modifier\")})","                }","            }","        }","    }","}"],"fileName":"exemple.swift","syntax":"swift","fileType":"swift","type":"file"},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet#Organisons-des-fichiers-de-base":{"type":"section","url":"\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base","title":"Organisons des fichiers de base","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Organisons-des-fichiers-de-base","abstract":[{"type":"text","text":"Découvrons comment se passe la création d’un projet sur Xcode."}]},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/D-couverte-de-SwiftUI":{"type":"topic","title":"Découverte de SwiftUI","url":"\/tutorials\/tutorial-table-of-contents\/d-couverte-de-swiftui","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-SwiftUI","role":"article","kind":"article","abstract":[]},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-du-bas":{"type":"section","title":"Le volet du bas","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-bas","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}]},"04-01-code-11.swift":{"content":["struct ContentView: View {","    @Query var contacts: [Contact] = []","","    @State var showAddView: Bool = false","","    @Environment(\\.modelContext) var context","","    var body: some View {","        NavigationStack {","            List {","                ForEach(contacts) { contact in","                    NavigationLink(value: contact) {","                        Text(contact.name)","                    }","                }","                .onDelete { indexSet in","                    for index in indexSet {","                        context.delete(contacts[index])","                    }","                }","            }","            .navigationTitle(\"Contacts\")","            .toolbar {","                ToolbarItem(placement: .navigationBarTrailing) {","                    Button {","                        showAddView.toggle()","                    } label: {","                        Image(systemName: \"plus.circle\")","                    }","                }","            }","            .sheet(isPresented: $showAddView) {","                AddView(","                    addMethod: {nom, phone, mail in","                        let contact = Contact(name: nom, phoneNumber: phone, mail: mail)","                        context.insert(contact)","                    })","            }","            .navigationDestination(for: Contact.self) { contact in","                VStack {","                    Text(contact.name)","                    Text(contact.mail)","","                    Spacer()","","                    Button(action: {","                    }, label: {Text(\"Modifier\")})","                }","            }","        }","    }","}"],"highlights":[],"syntax":"swift","identifier":"04-01-code-11.swift","type":"file","fileName":"exemple.swift","fileType":"swift"},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet":{"type":"topic","url":"\/tutorials\/test\/01-04-creer-un-projet","abstract":[{"type":"text","text":"Découvrons comment se passe la création d’un projet sur Xcode."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet","kind":"project","title":"Créer son premier projet","role":"project"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-actions":{"title":"Partie actions","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-actions","kind":"section","abstract":[{"text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram.","type":"text"}]},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/SwiftUI-avanc-":{"type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/swiftui-avanc-","title":"SwiftUI avancé","kind":"article","role":"article","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/SwiftUI-avanc-","abstract":[]},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-de-droite":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-de-droite","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"kind":"section","title":"Le volet de droite","role":"pseudoSymbol"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents":{"url":"\/tutorials\/tutorial-table-of-contents","kind":"overview","title":"Sup de Vinci - 2025","abstract":[{"type":"text","text":"Avec ce cours, vous allez découvrir les bases du développement d’application sur iOS"},{"type":"text","text":" "},{"type":"text","text":"avec des exemples et de la prise en main."},{"text":" ","type":"text"},{"type":"text","text":"L’objectif à la fin de cette semaine est que vous soyez en mesure de développer seul"},{"text":" ","type":"text"},{"type":"text","text":"une application iOS simple mais complète."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents","role":"overview","type":"topic"},"04-01-code-08.swift":{"content":["import SwiftUI","import SwiftData","","struct ContentView: View {","    @Query var contacts: [Contact] = []","","    @State var showAddView: Bool = false","","    @Environment(\\.modelContext) var context","","    var body: some View {","        NavigationStack {","            List {","                ForEach(contacts) { contact in","                    NavigationLink(value: contact) {","                        Text(contact.name)","                    }","                }","                .onDelete { indexSet in","                    for index in indexSet {","                        context.delete(contacts[index])","                    }","                }","            }","            .navigationTitle(\"Contacts\")","            .toolbar {","                ToolbarItem(placement: .navigationBarTrailing) {","                    Button {","                        showAddView.toggle()","                    } label: {","                        Image(systemName: \"plus.circle\")","                    }","                }","            }","            .sheet(isPresented: $showAddView) {","                AddView(addMethod: {nom, phone, mail in","                    let contact = Contact(name: nom, phoneNumber: phone, mail: mail)","                    context.insert(contact)","                })","            }","            .navigationDestination(for: Contact.self) { contact in","                VStack {","                    Text(contact.name)","                    Text(contact.mail)","                }","            }","        }","    }","}"],"identifier":"04-01-code-08.swift","type":"file","fileName":"exemple.swift","syntax":"swift","highlights":[{"line":19},{"line":20},{"line":21},{"line":22},{"line":23}],"fileType":"swift"},"doc://com.williamtomas.test/tutorials/test/02-01-intro-swiftui#Pr%C3%A9sentation":{"type":"section","title":"Présentation","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui#Pr%C3%A9sentation","abstract":[{"type":"text","text":"Introduit en 2019, SwiftUI est la nouvelle approche proposée par Apple pour créer des vues. SwiftUI permet de remplacer les vues créer via des Storyboard ou via du code UIKit. UIKit n’est cependant pas complètement rendu obsolète car SwiftUI est, in fine, une surcouche à UIKit. Ici la création des vues se fait de manière déclarative avec un apperçu en direct dans la preview interactive. SwiftUI fonctionne sur toutes les plateformes de la marque, le rendant très versatile."}]},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-texte":{"type":"section","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte","title":"Partie texte","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-texte","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}]},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui#Afficher-une-bottom-sheet":{"url":"\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#Afficher-une-bottom-sheet","type":"section","abstract":[{"type":"text","text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est que nous allons découvrir dans cette partie."}],"title":"Afficher une bottom sheet","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/test/02-02-swiftui-code#Les-basiques":{"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code#Les-basiques","type":"section","abstract":[{"type":"text","text":"Dans cette section, nous allons parcourir les éléments graphiques basiques proposés par SwiftUI pour créer une vue."}],"url":"\/tutorials\/test\/02-02-swiftui-code#Les-basiques","title":"Les basiques","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-trackpad":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad","url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-trackpad","abstract":[{"type":"text","text":"Pour certains d’entre vous, ce cours sera la première prise en main d’un Mac. Découvrons quelques spécificités liées à cet environnement."}],"kind":"section","title":"Le trackpad","role":"pseudoSymbol"},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/D-couverte-de-Swift-et-de-Xcode":{"type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/d-couverte-de-swift-et-de-xcode","title":"Découverte de Swift et de Xcode","kind":"article","role":"article","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/D-couverte-de-Swift-et-de-Xcode","abstract":[]},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-image":{"type":"section","title":"Partie image","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-image","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}]},"04-01-code-09.swift":{"type":"file","fileName":"exemple.swift","fileType":"swift","syntax":"swift","identifier":"04-01-code-09.swift","content":["struct UpdateView: View {","    @Bindable var contact: Contact","","    @Environment(\\.dismiss) var dismiss","","    var body: some View {","        NavigationView {","            Form {","                TextField(\"Nom\", text: $contact.name)","                TextField(\"Téléphone\", text: $contact.phoneNumber)","                    .keyboardType(.numberPad)","                TextField(\"E-Mail\", text: $contact.mail)","                    .keyboardType(.emailAddress)","            }","            .toolbar {","                ToolbarItemGroup(placement: .cancellationAction) {","                    Button(\"Annuler\") {","                        dismiss()","                    }","                }","","                ToolbarItemGroup(placement: .confirmationAction) {","                    Button(\"OK\") {","                        dismiss()","                    }","                }","            }","        }","    }","}"],"highlights":[]},"doc://com.williamtomas.test/tutorials/test/03-01-optimisation-SwiftUI":{"type":"topic","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI","url":"\/tutorials\/test\/03-01-optimisation-swiftui","abstract":[{"type":"text","text":"Dans le chapitre précédent, notre code SwiftUI est fonctionnel et il nous permet d’afficher notre vue convenablement. Mais le fichier de code généré est long, dense : on peut vite s’y perdre ! Le compilateur Swift n’aime pas non plus les vues SwiftUI avec trop de lignes de code, qui vont lui demander du temps d’évaluation supplémentaire et peuvent générer un warning."}],"kind":"project","title":"Optimisation du code SwiftUI","role":"project"},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui":{"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui","type":"topic","abstract":[{"type":"text","text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est que nous allons découvrir dans cette partie."}],"url":"\/tutorials\/test\/03-03-navigation-swiftui","title":"Navigation entre plusieurs écrans","role":"project","kind":"project"},"doc://com.williamtomas.test/tutorials/test/02-02-swiftui-code":{"type":"topic","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-02-swiftui-code","url":"\/tutorials\/test\/02-02-swiftui-code","abstract":[{"type":"text","text":"Dans cette section, nous allons parcourir les éléments graphiques basiques proposés par SwiftUI pour créer une vue."}],"kind":"project","title":"Prise en main de SwiftUI","role":"project"},"04-01-code-13.mp4":{"poster":null,"type":"video","identifier":"04-01-code-13.mp4","variants":[{"url":"\/videos\/com.williamtomas.test\/04-01-code-13.mp4","traits":["1x","light"]}],"alt":null},"doc://com.williamtomas.test/tutorials/test/04-01-intro-swiftdata":{"title":"Introduction à SwiftData","role":"project","type":"topic","url":"\/tutorials\/test\/04-01-intro-swiftdata","abstract":[{"text":"Introduit en 2023 en remplacement de CoreData, SwiftData vise à rendre plus simple le stockage de données sur le téléphone en s’intégrant bien dans une application basée sur SwiftUI.","type":"text"}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-01-intro-swiftdata","kind":"project"},"doc://com.williamtomas.test/tutorials/test/01-02-decouverte-swift":{"title":"Le langage Swift","url":"\/tutorials\/test\/01-02-decouverte-swift","role":"project","type":"topic","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift","kind":"project","abstract":[{"type":"text","text":"Comme présenté dans la partie précédente, Swift est un langage orienté objet open-source."},{"type":"text","text":" "},{"text":"Apple intervient comme contributeur principal au projet, et construit des librairies","type":"text"},{"type":"text","text":" "},{"type":"text","text":"propriétaire qui elles ne sont pas open-source."}]},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-clavier":{"type":"section","title":"Le clavier","url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-clavier","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Pour certains d’entre vous, ce cours sera la première prise en main d’un Mac. Découvrons quelques spécificités liées à cet environnement."}]},"doc://com.williamtomas.test/tutorials/Tutorial-Table-of-Contents/Traitement-de-la-donn-e-en-Swift":{"type":"topic","url":"\/tutorials\/tutorial-table-of-contents\/traitement-de-la-donn-e-en-swift","title":"Traitement de la donnée en Swift","kind":"article","role":"article","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/Tutorial-Table-of-Contents\/Traitement-de-la-donn-e-en-Swift","abstract":[]},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple":{"type":"topic","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple","title":"Exemple d'utilisation : reproduction d'un post Instagram","kind":"project","role":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}]},"doc://com.williamtomas.test/tutorials/test/04-02-intro-urlsession#Prise-en-main":{"title":"Prise en main","url":"\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession#Prise-en-main","kind":"section","abstract":[{"text":"Jusqu’à présent, toute la donnée que nous traitons est soit directement contenue dans l’app soit ajoutée par l’utilisateur. Dans la réalité des faits, la vaste majorité de la donnée consommée par une application provient d’un serveur. Nous allons découvrir comment récuperer cette donnée et l’afficher dans une application basique.","type":"text"}]},"04-01-code-13.swift":{"identifier":"04-01-code-13.swift","highlights":[{"line":41},{"line":42},{"line":43}],"content":["struct ContentView: View {","    @Query var contacts: [Contact] = []","","    @State var showAddView: Bool = false","","    @Environment(\\.modelContext) var context","","    @State var contactToEdit: Contact?","","    var body: some View {","        NavigationStack {","            List {","                ForEach(contacts) { contact in","                    NavigationLink(value: contact) {","                        Text(contact.name)","                    }","                }","                .onDelete { indexSet in","                    for index in indexSet {","                        context.delete(contacts[index])","                    }","                }","            }","            .navigationTitle(\"Contacts\")","            .toolbar {","                ToolbarItem(placement: .navigationBarTrailing) {","                    Button {","                        showAddView.toggle()","                    } label: {","                        Image(systemName: \"plus.circle\")","                    }","                }","            }","            .sheet(isPresented: $showAddView) {","                AddView(","                    addMethod: {nom, phone, mail in","                        let contact = Contact(name: nom, phoneNumber: phone, mail: mail)","                        context.insert(contact)","                    })","            }","            .sheet(item: $contactToEdit, content: { contact in","                    UpdateView(contact: contact)","            })","            .navigationDestination(for: Contact.self) { contact in","                VStack {","                    Text(contact.name)","                    Text(contact.mail)","","                    Spacer()","","                    Button(action: {","                        contactToEdit = contact","                    }, label: {Text(\"Modifier\")})","                }","            }","        }","    }","}"],"fileName":"exemple.swift","fileType":"swift","type":"file","syntax":"swift"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-du-haut":{"title":"Le volet du haut","role":"pseudoSymbol","type":"section","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut","abstract":[{"text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store.","type":"text"}],"kind":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-du-haut"},"doc://com.williamtomas.test/tutorials/test/02-01-intro-swiftui":{"type":"topic","title":"SwiftUI c'est quoi ?","url":"\/tutorials\/test\/02-01-intro-swiftui","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-01-intro-swiftui","role":"project","kind":"project","abstract":[{"type":"text","text":"Introduit en 2019, SwiftUI est la nouvelle approche proposée par Apple pour créer des vues. SwiftUI permet de remplacer les vues créer via des Storyboard ou via du code UIKit. UIKit n’est cependant pas complètement rendu obsolète car SwiftUI est, in fine, une surcouche à UIKit. Ici la création des vues se fait de manière déclarative avec un apperçu en direct dans la preview interactive. SwiftUI fonctionne sur toutes les plateformes de la marque, le rendant très versatile."}]},"04-01-code-04.png":{"identifier":"04-01-code-04.png","type":"image","variants":[{"url":"\/images\/com.williamtomas.test\/04-01-code-04.png","traits":["1x","light"]}],"alt":""},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac":{"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac","type":"topic","abstract":[{"type":"text","text":"Pour certains d’entre vous, ce cours sera la première prise en main d’un Mac. Découvrons quelques spécificités liées à cet environnement."}],"url":"\/tutorials\/test\/01-05-debuter-avec-mac","title":"Débuter avec Mac","role":"project","kind":"project"},"04-01-code-03.swift":{"identifier":"04-01-code-03.swift","syntax":"swift","type":"file","content":["import SwiftData","","@Model","class Contact: Identifiable, Hashable {","    let id: UUID = UUID()","    var name: String","    var phoneNumber: String","    var mail: String","","    init(name: String, phoneNumber: String, mail: String) {","        self.name = name","        self.phoneNumber = phoneNumber","        self.mail = mail","    }","}"],"fileName":"exemple.swift","fileType":"swift","highlights":[{"line":1},{"line":2},{"line":3}]},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Mise-en-place":{"url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Mise-en-place","type":"section","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}],"title":"Mise en place","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement":{"type":"topic","url":"\/tutorials\/test\/01-01-decouverte-environnement","title":"Découverte de l'environnement","kind":"project","role":"project","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}]},"doc://com.williamtomas.test/tutorials/test/04-02-intro-urlsession":{"type":"topic","title":"Récupérer des données depuis un serveur","url":"\/tutorials\/test\/04-02-intro-urlsession","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/04-02-intro-urlsession","role":"project","kind":"project","abstract":[{"type":"text","text":"Jusqu’à présent, toute la donnée que nous traitons est soit directement contenue dans l’app soit ajoutée par l’utilisateur. Dans la réalité des faits, la vaste majorité de la donnée consommée par une application provient d’un serveur. Nous allons découvrir comment récuperer cette donnée et l’afficher dans une application basique."}]},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode":{"url":"\/tutorials\/test\/01-03-decouverte-xcode","kind":"project","title":"Présentation d'Xcode","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode","role":"project","type":"topic"},"doc://com.williamtomas.test/tutorials/test/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation":{"title":"Le système d'exploitation","url":"\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-05-debuter-avec-mac#Le-syst%C3%A8me-dexploitation","kind":"section","abstract":[{"text":"Pour certains d’entre vous, ce cours sera la première prise en main d’un Mac. Découvrons quelques spécificités liées à cet environnement.","type":"text"}]},"doc://com.williamtomas.test/tutorials/test/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues":{"title":"Découper notre vue en plusieurs minis vues","url":"\/tutorials\/test\/03-01-optimisation-swiftui#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-01-optimisation-SwiftUI#D%C3%A9couper-notre-vue-en-plusieurs-minis-vues","kind":"section","abstract":[{"text":"Dans le chapitre précédent, notre code SwiftUI est fonctionnel et il nous permet d’afficher notre vue convenablement. Mais le fichier de code généré est long, dense : on peut vite s’y perdre ! Le compilateur Swift n’aime pas non plus les vues SwiftUI avec trop de lignes de code, qui vont lui demander du temps d’évaluation supplémentaire et peuvent générer un warning.","type":"text"}]},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-volet-gauche":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche","url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-volet-gauche","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"kind":"section","title":"Le volet gauche","role":"pseudoSymbol"},"doc://com.williamtomas.test/tutorials/test/02-03-swiftui-insta-exemple#Partie-du-haut":{"type":"section","url":"\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut","title":"Partie du haut","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/02-03-swiftui-insta-exemple#Partie-du-haut","abstract":[{"type":"text","text":"Nous avons vu dans la section précédentes des éléments basiques pour créer des vues en SwiftUI. L’approche était volontairement assez théorique et rudimentaire. Mettons à l’usage ces éléments pour créer une vue complète ! Dans cet exemple, nous allons utiliser SwiftUI pour re-créer la vue qui présente un post Instagram."}]},"04-01-code-08.mp4":{"poster":null,"type":"video","identifier":"04-01-code-08.mp4","variants":[{"url":"\/videos\/com.williamtomas.test\/04-01-code-08.mp4","traits":["1x","light"]}],"alt":null},"doc://com.williamtomas.test/tutorials/test/03-03-navigation-swiftui#La-NavigationStack":{"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack","type":"section","abstract":[{"text":"Pour le moment nous avons vu comment créer un vue en SwiftUI et comment la faire réagir aux actions de l’utilisateur. Mais une application n’est pas constituée d’un seul écran, et il faut naviguer entre ces différents écrans. C’est que nous allons découvrir dans cette partie.","type":"text"}],"url":"\/tutorials\/test\/03-03-navigation-swiftui#La-NavigationStack","title":"La NavigationStack","role":"pseudoSymbol","kind":"section"},"doc://com.williamtomas.test/tutorials/test/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet":{"type":"section","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet","url":"\/tutorials\/test\/01-04-creer-un-projet#Cr%C3%A9er-son-premier-projet","abstract":[{"type":"text","text":"Découvrons comment se passe la création d’un projet sur Xcode."}],"kind":"section","title":"Créer son premier projet","role":"pseudoSymbol"},"04-01-code-02.swift":{"identifier":"04-01-code-02.swift","syntax":"swift","type":"file","content":["class Contact: Identifiable, Hashable {","    let id: UUID = UUID()","    var name: String","    var phoneNumber: String","    var mail: String","","    init(name: String, phoneNumber: String, mail: String) {","        self.name = name","        self.phoneNumber = phoneNumber","        self.mail = mail","    }","}"],"fileName":"exemple.swift","fileType":"swift","highlights":[{"line":1},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}]},"doc://com.williamtomas.test/tutorials/test/01-02-decouverte-swift#Les-bases-du-langage":{"type":"section","url":"\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage","title":"Les bases du langage","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-02-decouverte-swift#Les-bases-du-langage","abstract":[{"type":"text","text":"Comme présenté dans la partie précédente, Swift est un langage orienté objet open-source."},{"type":"text","text":" "},{"type":"text","text":"Apple intervient comme contributeur principal au projet, et construit des librairies"},{"type":"text","text":" "},{"type":"text","text":"propriétaire qui elles ne sont pas open-source."}]},"doc://com.williamtomas.test/tutorials/test/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State":{"type":"section","url":"\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State","title":"Les états avec le property wrapper @State","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/03-02-swiftui-etats#Les-%C3%A9tats-avec-le-property-wrapper-State","abstract":[{"type":"text","text":"Jusqu’à présent les vues que l’on a traité sont statiques, c’est à dire qu’elles ne s’adaptent pas en fonction d’une action de l’utilisateur. Mais il est important de pouvoir créer des vues interactives, avec un ou plusieurs états, pour répondre aux actions de l’utilisateur."}]},"04-01-code-07.swift":{"identifier":"04-01-code-07.swift","highlights":[{"line":5}],"content":["import SwiftUI","import SwiftData","","struct ContentView: View {","    @Query var contacts: [Contact] = []","","    @State var showAddView: Bool = false","","    @Environment(\\.modelContext) var context","","    var body: some View {","        NavigationStack {","            List {","                ForEach(contacts) { contact in","                    NavigationLink(value: contact) {","                        Text(contact.name)","                    }","                }","            }","            .navigationTitle(\"Contacts\")","            .toolbar {","                ToolbarItem(placement: .navigationBarTrailing) {","                    Button {","                        showAddView.toggle()","                    } label: {","                        Image(systemName: \"plus.circle\")","                    }","                }","            }","            .sheet(isPresented: $showAddView) {","                AddView(addMethod: {nom, phone, mail in","                    let contact = Contact(name: nom, phoneNumber: phone, mail: mail)","                    context.insert(contact)","                })","            }","            .navigationDestination(for: Contact.self) { contact in","                VStack {","                    Text(contact.name)","                    Text(contact.mail)","                }","            }","        }","    }","}"],"fileName":"exemple.swift","fileType":"swift","type":"file","syntax":"swift"},"doc://com.williamtomas.test/tutorials/test/01-03-decouverte-xcode#Le-simulateur":{"url":"\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur","kind":"section","title":"Le simulateur","abstract":[{"type":"text","text":"Xcode est l’IDE maison proposé par Apple pour développer sur ses plateformes. Il embarque tout le nécessaire pour commencer, avec le compilateur et le simulateur. Xcode est aussi nécessaire pour envoyer  son application sur l’App Store."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-03-decouverte-xcode#Le-simulateur","role":"pseudoSymbol","type":"section"},"doc://com.williamtomas.test/tutorials/test/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store":{"type":"section","url":"\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store","abstract":[{"type":"text","text":"Découvrons les éléments qui entourent le développement d’application dans l’éco système Apple."}],"identifier":"doc:\/\/com.williamtomas.test\/tutorials\/test\/01-01-decouverte-environnement#Avoir-son-application-sur-lApp-Store","kind":"section","title":"Avoir son application sur l'App Store","role":"pseudoSymbol"},"04-01-code-01.swift":{"identifier":"04-01-code-01.swift","highlights":[],"content":["struct Contact: Identifiable, Hashable {","    let id: UUID = UUID()","    let name: String","    let phoneNumber: String","    let mail: String","}"],"fileName":"exemple.swift","fileType":"swift","type":"file","syntax":"swift"}}}